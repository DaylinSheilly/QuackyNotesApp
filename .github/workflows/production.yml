name: Deploy to production

on:
  workflow_dispatch:

jobs:
  create:
    name: 'Deploy to production'
    defaults:
      run:
        shell: bash
    
    runs-on: ubuntu-latest
    
    steps:

    # ======================================================
    # Checkout the infra repository
    # ======================================================
    - uses: actions/checkout@v2
      name: 'Checkout infrastructure repository'
      with:
        persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
        fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.      
        repository: AndresDavidArcos/QuackyNotesInfra

    # ======================================================
    # Terraform setup
    # 
    # - secrets.TERRAFORM_API_TOKEN: is the Terraform
    # Cloud API Token.
    # ======================================================
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.11
        cli_config_credentials_token: ${{ secrets.TERRAFORM_API_TOKEN }}
        
    - name: Terraform Init and Validate
      id: init
      working-directory: production/
      run: |
        terraform init
        terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      working-directory: production/
      continue-on-error: true
    
    - name: Notification Slack
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: planning-production
        SLACK_TITLE: Post Title
        SLACK_USERNAME: ¿This-plan-looks-good?
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL_PLAN }}
        SLACK_MESSAGE: >
          ${{ github.actor }} is planning something:\n
          #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
          #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${{ steps.plan.outputs.stdout }}
          \`\`\`
          </details>
        
          
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      id: apply
      working-directory: production/
      run: terraform apply -auto-approve
      
    - name: Terraform Output
      id: apply_output
      working-directory: production/
      run: terraform output -raw -no-color production_dns

    # ======================================================
    # Checkout the main branch so that we can deploy it
    # ======================================================
    - uses: actions/checkout@v2
      name: 'Checkout main'
      with:
        ref: main

    - name: Install dependencies
      working-directory: ./web
      run: npm install

    - name: Build static files
      working-directory: ./web
      run: npm run build

    - name: Copy build files from main branch to remote host
      uses: appleboy/scp-action@master
      with:
        host: ${{ steps.apply_output.outputs.stdout }}
        username: ${{ secrets.REMOTE_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}
        source: web/build/
        target: /home/ubuntu/

    - name: Copy backend files from main branch to remote host
      uses: appleboy/scp-action@master
      with:
        host: ${{ steps.apply_output.outputs.stdout }}
        username: ${{ secrets.REMOTE_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}
        source: backend
        target: /home/ubuntu/
     

    - name: Copy docker-compose.yml file from main branch to remote host
      uses: appleboy/scp-action@master
      with:
        source: docker-compose.yml
        target: /home/ubuntu/
        host: ${{ steps.apply_output.outputs.stdout }}
        username: ${{ secrets.REMOTE_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}                      
    
    # ======================================================
    # Once we have the new files synced to the staging server
    # we need to start the staging server in a docker container. 
    # ======================================================
    - name: Deploy docker container with nginx
      uses: appleboy/ssh-action@master
      with:
        host: ${{ steps.apply_output.outputs.stdout }}
        username: ${{ secrets.REMOTE_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}
        script: |
          while [ -z "$(sudo docker system info 2>/dev/null)" ]
          do
            echo "Waiting for Docker daemon to start..."
            sleep 15
          done               
          echo "Docker daemon started. Waiting for additional 15 seconds..."
          sleep 30
          sudo sed -i "s/DNS/${{ steps.apply_output.outputs.stdout }}/g" docker-compose.yml
          sudo docker-compose up -d --build        

    - name: Notification Slack
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: deploying-production
        SLACK_TITLE: Post Title
        SLACK_USERNAME: Production-Watcher
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL_PRODUCTION }}
        SLACK_MESSAGE: >
          ${{ github.actor }} has deployed to production:
          #### Production server deployed
            
            URL: http://${{ steps.apply_output.outputs.stdout }}





